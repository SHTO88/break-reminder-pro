name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.get_version.outputs.VERSION }}',
              name: 'Break Reminder Pro ${{ steps.get_version.outputs.VERSION }}',
              body: `## What's New in ${{ steps.get_version.outputs.VERSION }}

            ### 🎉 Features
            - New features and improvements

            ### 🐛 Bug Fixes
            - Various bug fixes and stability improvements

            ### 📦 Installation
            1. Download the appropriate installer for your system below
            2. Run the installer and follow the setup instructions
            3. Launch Break Reminder Pro from your Start Menu or Desktop

            ### 🔄 Updating
            If you have a previous version installed, the installer will automatically update your existing installation while preserving your settings.

            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ steps.get_version.outputs.VERSION }}`,
              draft: false,
              prerelease: false
            });
            return data.id;

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Update version in Cargo.toml
        shell: bash
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          VERSION_NUMBER="${VERSION#v}"
          sed -i "s/^version = .*/version = \"$VERSION_NUMBER\"/" src-tauri/Cargo.toml
          echo "Updated version to $VERSION_NUMBER"

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  update-release:
    needs: [create-release, build-tauri]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Update Release Description
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }}
            });

            const assets = release.data.assets;
            let downloadSection = '\n### 📥 Downloads\n\n';
            
            assets.forEach(asset => {
              if (asset.name.endsWith('.msi')) {
                downloadSection += `- **Windows Installer**: [${asset.name}](${asset.browser_download_url}) (${(asset.size / 1024 / 1024).toFixed(1)} MB)\n`;
              } else if (asset.name.endsWith('.exe')) {
                downloadSection += `- **Windows Portable**: [${asset.name}](${asset.browser_download_url}) (${(asset.size / 1024 / 1024).toFixed(1)} MB)\n`;
              }
            });

            const updatedBody = release.data.body + downloadSection + `
            
            ### 🔧 System Requirements
            - Windows 10 or later
            - 50 MB free disk space
            - Internet connection for update checks (optional)

            ### 💡 Need Help?
            - Check out the [README](https://github.com/${{ github.repository }}#readme) for usage instructions
            - Report issues on the [Issues page](https://github.com/${{ github.repository }}/issues)
            `;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              body: updatedBody
            });